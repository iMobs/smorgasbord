schema
  @core(feature: "https://specs.apollo.dev/core/v0.2"),
  @core(feature: "https://specs.apollo.dev/join/v0.1", for: EXECUTION)
{
  query: Query
  mutation: Mutation
}

directive @core(as: String, feature: String!, for: core__Purpose) repeatable on SCHEMA

directive @join__field(graph: join__Graph, provides: join__FieldSet, requires: join__FieldSet) on FIELD_DEFINITION

directive @join__graph(name: String!, url: String!) on ENUM_VALUE

directive @join__owner(graph: join__Graph!) on INTERFACE | OBJECT

directive @join__type(graph: join__Graph!, key: join__FieldSet) repeatable on INTERFACE | OBJECT

type Mutation {
  login(email: String!, password: String!): Boolean! @join__field(graph: AUTH_SERVICE)
  signup(user: UserInput!): User! @join__field(graph: AUTH_SERVICE)
}

type Post
  @join__owner(graph: POSTS_SERVICE)
  @join__type(graph: POSTS_SERVICE, key: "id")
{
  author: User! @join__field(graph: POSTS_SERVICE)
  authorId: Int! @join__field(graph: POSTS_SERVICE)
  content: String! @join__field(graph: POSTS_SERVICE)
  id: ID! @join__field(graph: POSTS_SERVICE)
  title: String! @join__field(graph: POSTS_SERVICE)
}

type Query {
  getGreeting: String! @join__field(graph: AUTH_SERVICE)
  getPost(id: Float!): Post! @join__field(graph: POSTS_SERVICE)
  getUser(id: ID!): User! @join__field(graph: AUTH_SERVICE)
}

type User
  @join__owner(graph: AUTH_SERVICE)
  @join__type(graph: AUTH_SERVICE, key: "id")
  @join__type(graph: POSTS_SERVICE, key: "id")
{
  email: String! @join__field(graph: AUTH_SERVICE)
  id: Int! @join__field(graph: AUTH_SERVICE)
}

input UserInput {
  email: String!
  password: String!
}

enum core__Purpose {
  """
  `EXECUTION` features provide metadata necessary to for operation execution.
  """
  EXECUTION

  """
  `SECURITY` features provide metadata necessary to securely resolve fields.
  """
  SECURITY
}

scalar join__FieldSet

enum join__Graph {
  AUTH_SERVICE @join__graph(name: "auth-service" url: "http://localhost:8080")
  POSTS_SERVICE @join__graph(name: "posts-service" url: "http://localhost:3000/graphql")
}
